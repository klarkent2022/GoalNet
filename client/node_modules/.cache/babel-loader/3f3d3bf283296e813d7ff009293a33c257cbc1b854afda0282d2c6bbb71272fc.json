{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandlers = exports.init = void 0;\nconst logger_1 = require(\"./logger\");\nconst logger = (0, logger_1.getInstance)();\nfunction init(proxy, option) {\n  const handlers = getHandlers(option);\n  for (const eventName of Object.keys(handlers)) {\n    proxy.on(eventName, handlers[eventName]);\n  }\n  // https://github.com/webpack/webpack-dev-server/issues/1642\n  proxy.on('econnreset', (error, req, res, target) => {\n    logger.error(`[HPM] ECONNRESET: %O`, error);\n  });\n  // https://github.com/webpack/webpack-dev-server/issues/1642#issuecomment-1104325120\n  proxy.on('proxyReqWs', (proxyReq, req, socket, options, head) => {\n    socket.on('error', error => {\n      logger.error(`[HPM] WebSocket error: %O`, error);\n    });\n  });\n  logger.debug('[HPM] Subscribed to http-proxy events:', Object.keys(handlers));\n}\nexports.init = init;\nfunction getHandlers(options) {\n  // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n  const proxyEventsMap = {\n    error: 'onError',\n    proxyReq: 'onProxyReq',\n    proxyReqWs: 'onProxyReqWs',\n    proxyRes: 'onProxyRes',\n    open: 'onOpen',\n    close: 'onClose'\n  };\n  const handlers = {};\n  for (const [eventName, onEventName] of Object.entries(proxyEventsMap)) {\n    // all handlers for the http-proxy events are prefixed with 'on'.\n    // loop through options and try to find these handlers\n    // and add them to the handlers object for subscription in init().\n    const fnHandler = options ? options[onEventName] : null;\n    if (typeof fnHandler === 'function') {\n      handlers[eventName] = fnHandler;\n    }\n  }\n  // add default error handler in absence of error handler\n  if (typeof handlers.error !== 'function') {\n    handlers.error = defaultErrorHandler;\n  }\n  // add default close handler in absence of close handler\n  if (typeof handlers.close !== 'function') {\n    handlers.close = logClose;\n  }\n  return handlers;\n}\nexports.getHandlers = getHandlers;\nfunction defaultErrorHandler(err, req, res) {\n  // Re-throw error. Not recoverable since req & res are empty.\n  if (!req && !res) {\n    throw err; // \"Error: Must provide a proper URL as target\"\n  }\n\n  const host = req.headers && req.headers.host;\n  const code = err.code;\n  if (res.writeHead && !res.headersSent) {\n    if (/HPE_INVALID/.test(code)) {\n      res.writeHead(502);\n    } else {\n      switch (code) {\n        case 'ECONNRESET':\n        case 'ENOTFOUND':\n        case 'ECONNREFUSED':\n        case 'ETIMEDOUT':\n          res.writeHead(504);\n          break;\n        default:\n          res.writeHead(500);\n      }\n    }\n  }\n  res.end(`Error occurred while trying to proxy: ${host}${req.url}`);\n}\nfunction logClose(req, socket, head) {\n  // view disconnected websocket connections\n  logger.info('[HPM] Client disconnected');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}