{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.match = void 0;\nconst isGlob = require(\"is-glob\");\nconst micromatch = require(\"micromatch\");\nconst url = require(\"url\");\nconst errors_1 = require(\"./errors\");\nfunction match(context, uri, req) {\n  // single path\n  if (isStringPath(context)) {\n    return matchSingleStringPath(context, uri);\n  }\n  // single glob path\n  if (isGlobPath(context)) {\n    return matchSingleGlobPath(context, uri);\n  }\n  // multi path\n  if (Array.isArray(context)) {\n    if (context.every(isStringPath)) {\n      return matchMultiPath(context, uri);\n    }\n    if (context.every(isGlobPath)) {\n      return matchMultiGlobPath(context, uri);\n    }\n    throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);\n  }\n  // custom matching\n  if (typeof context === 'function') {\n    const pathname = getUrlPathName(uri);\n    return context(pathname, req);\n  }\n  throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_GENERIC);\n}\nexports.match = match;\n/**\n * @param  {String} context '/api'\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchSingleStringPath(context, uri) {\n  const pathname = getUrlPathName(uri);\n  return pathname.indexOf(context) === 0;\n}\nfunction matchSingleGlobPath(pattern, uri) {\n  const pathname = getUrlPathName(uri);\n  const matches = micromatch([pathname], pattern);\n  return matches && matches.length > 0;\n}\nfunction matchMultiGlobPath(patternList, uri) {\n  return matchSingleGlobPath(patternList, uri);\n}\n/**\n * @param  {String} contextList ['/api', '/ajax']\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchMultiPath(contextList, uri) {\n  let isMultiPath = false;\n  for (const context of contextList) {\n    if (matchSingleStringPath(context, uri)) {\n      isMultiPath = true;\n      break;\n    }\n  }\n  return isMultiPath;\n}\n/**\n * Parses URI and returns RFC 3986 path\n *\n * @param  {String} uri from req.url\n * @return {String}     RFC 3986 path\n */\nfunction getUrlPathName(uri) {\n  return uri && url.parse(uri).pathname;\n}\nfunction isStringPath(context) {\n  return typeof context === 'string' && !isGlob(context);\n}\nfunction isGlobPath(context) {\n  return isGlob(context);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}