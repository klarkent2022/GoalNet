{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.responseInterceptor = void 0;\nconst zlib = require(\"zlib\");\n/**\n * Intercept responses from upstream.\n * Automatically decompress (deflate, gzip, brotli).\n * Give developer the opportunity to modify intercepted Buffer and http.ServerResponse\n *\n * NOTE: must set options.selfHandleResponse=true (prevent automatic call of res.end())\n */\nfunction responseInterceptor(interceptor) {\n  return async function proxyRes(proxyRes, req, res) {\n    const originalProxyRes = proxyRes;\n    let buffer = Buffer.from('', 'utf8');\n    // decompress proxy response\n    const _proxyRes = decompress(proxyRes, proxyRes.headers['content-encoding']);\n    // concat data stream\n    _proxyRes.on('data', chunk => buffer = Buffer.concat([buffer, chunk]));\n    _proxyRes.on('end', async () => {\n      // copy original headers\n      copyHeaders(proxyRes, res);\n      // call interceptor with intercepted response (buffer)\n      const interceptedBuffer = Buffer.from(await interceptor(buffer, originalProxyRes, req, res));\n      // set correct content-length (with double byte character support)\n      res.setHeader('content-length', Buffer.byteLength(interceptedBuffer, 'utf8'));\n      res.write(interceptedBuffer);\n      res.end();\n    });\n    _proxyRes.on('error', error => {\n      res.end(`Error fetching proxied request: ${error.message}`);\n    });\n  };\n}\nexports.responseInterceptor = responseInterceptor;\n/**\n * Streaming decompression of proxy response\n * source: https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L116\n */\nfunction decompress(proxyRes, contentEncoding) {\n  let _proxyRes = proxyRes;\n  let decompress;\n  switch (contentEncoding) {\n    case 'gzip':\n      decompress = zlib.createGunzip();\n      break;\n    case 'br':\n      decompress = zlib.createBrotliDecompress();\n      break;\n    case 'deflate':\n      decompress = zlib.createInflate();\n      break;\n    default:\n      break;\n  }\n  if (decompress) {\n    _proxyRes.pipe(decompress);\n    _proxyRes = decompress;\n  }\n  return _proxyRes;\n}\n/**\n * Copy original headers\n * https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L78\n */\nfunction copyHeaders(originalResponse, response) {\n  response.statusCode = originalResponse.statusCode;\n  response.statusMessage = originalResponse.statusMessage;\n  if (response.setHeader) {\n    let keys = Object.keys(originalResponse.headers);\n    // ignore chunked, brotli, gzip, deflate headers\n    keys = keys.filter(key => !['content-encoding', 'transfer-encoding'].includes(key));\n    keys.forEach(key => {\n      let value = originalResponse.headers[key];\n      if (key === 'set-cookie') {\n        // remove cookie domain\n        value = Array.isArray(value) ? value : [value];\n        value = value.map(x => x.replace(/Domain=[^;]+?/i, ''));\n      }\n      response.setHeader(key, value);\n    });\n  } else {\n    response.headers = originalResponse.headers;\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}