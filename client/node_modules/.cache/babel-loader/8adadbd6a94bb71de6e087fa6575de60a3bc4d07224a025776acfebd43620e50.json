{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConfig = void 0;\nconst isPlainObj = require(\"is-plain-obj\");\nconst url = require(\"url\");\nconst errors_1 = require(\"./errors\");\nconst logger_1 = require(\"./logger\");\nconst logger = (0, logger_1.getInstance)();\nfunction createConfig(context, opts) {\n  // structure of config object to be returned\n  const config = {\n    context: undefined,\n    options: {}\n  };\n  // app.use('/api', proxy({target:'http://localhost:9000'}));\n  if (isContextless(context, opts)) {\n    config.context = '/';\n    config.options = Object.assign(config.options, context);\n    // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n  } else if (isStringShortHand(context)) {\n    const oUrl = url.parse(context);\n    const target = [oUrl.protocol, '//', oUrl.host].join('');\n    config.context = oUrl.pathname || '/';\n    config.options = Object.assign(config.options, {\n      target\n    }, opts);\n    if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n      config.options.ws = true;\n    }\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n  } else {\n    config.context = context;\n    config.options = Object.assign(config.options, opts);\n  }\n  configureLogger(config.options);\n  if (!config.options.target && !config.options.router) {\n    throw new Error(errors_1.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n  }\n  return config;\n}\nexports.createConfig = createConfig;\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n *      app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\nfunction isStringShortHand(context) {\n  if (typeof context === 'string') {\n    return !!url.parse(context).host;\n  }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\nfunction isContextless(context, opts) {\n  return isPlainObj(context) && (opts == null || Object.keys(opts).length === 0);\n}\nfunction configureLogger(options) {\n  if (options.logLevel) {\n    logger.setLevel(options.logLevel);\n  }\n  if (options.logProvider) {\n    logger.setProvider(options.logProvider);\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}